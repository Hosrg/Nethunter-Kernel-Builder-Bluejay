name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate matrix from repos.json
        id: matrix
        run: |
          echo "Generating build matrix..."
          REPOS=$(cat $CONFIGURATION)
          echo "$REPOS" | jq -c '.[]' | while read repo; do
            echo "::set-output name=build_matrix::$(echo $repo | jq -r '{kernelSource: .kernelSource, toolchains: .toolchains, params: .params, extraParams: .extraParams}')"
          done

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      matrix:
        config: ${{fromJson(needs.Set-repos.outputs.build_matrix)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  libncurses-dev \
                                  bison \
                                  flex \
                                  libssl-dev \
                                  libelf-dev \
                                  git \
                                  clang

      - name: Create working directory
        run: mkdir -p ${{matrix.config.kernelSource.name}}_${{matrix.config.kernelSource.device}}

      - name: Clone kernel source
        run: |
          cd ${{matrix.config.kernelSource.name}}_${{matrix.config.kernelSource.device}}
          git clone --depth=1 -b ${{matrix.config.kernelSource.branch}} ${{matrix.config.kernelSource.repo}} kernel

      - name: Get toolchains
        run: |
          for toolchain in "${{toJson(matrix.config.toolchains)}}" ; do
            TC_NAME=$(echo $toolchain | jq -r '.name')
            TC_REPO=$(echo $toolchain | jq -r '.repo')
            TC_BRANCH=$(echo $toolchain | jq -r '.branch')
            git clone --depth=1 -b $TC_BRANCH $TC_REPO ${TC_NAME}
          done

      - name: Set up build environment
        run: |
          export ARCH=${{matrix.config.params.ARCH}}
          export CROSS_COMPILE=${{matrix.config.params.CROSS_COMPILE}}
          export CROSS_COMPILE_ARM32=${{matrix.config.params.CROSS_COMPILE_ARM32}}
          export CLANG_TRIPLE=${{matrix.config.params.CLANG_TRIPLE}}
          export CC=${{matrix.config.params.CC}}

      - name: Generate default config
        run: |
          cd ${{matrix.config.kernelSource.name}}_${{matrix.config.kernelSource.device}}/kernel
          make O=out ARCH=${{matrix.config.params.ARCH}} <defconfig_name>  # Replace with the appropriate defconfig

      - name: Compile the kernel
        run: |
          cd ${{matrix.config.kernelSource.name}}_${{matrix.config.kernelSource.device}}/kernel
          make O=out ARCH=${{matrix.config.params.ARCH}} -j$(nproc) V=1 > build.log 2>&1

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: kernel-build-outputs
          path: ${{matrix.config.kernelSource.name}}_${{matrix.config.kernelSource.device}}/kernel/out/
